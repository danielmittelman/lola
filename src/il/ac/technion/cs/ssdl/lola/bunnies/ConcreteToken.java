package il.ac.technion.cs.ssdl.lola.bunnies;

/// <summary>
/// A class representing a token in the input.
/// </summary>
/// <remarks>
/// A collection of concrete tokens is a representation of an input file
/// (or input string). However, pay attention to the redundancy in having
/// the line and column kept around (in addition to the file text, that
/// implies these attributes). Therefore, inconsistencies should be avoided
/// (or at least be aware of them). The token does not necessarily span
/// over one line. Therefore, the line in which it ends may be different
/// than the line it starts in. The column in which it ends may be
/// different than the column it starts in plus the length of the value
/// string.
///
/// When precessing a single file, Lola may encounter tokens generated by
/// other files than the main one. Therefore, the ConcreteToken should hold that
/// information (i.e., we should add a field).
///
/// The role of the Token class is unclear. It should be handled better.
/// </remarks>
public class ConcreteToken extends Token implements ConcreteBunny
        {
        /// <summary>
        /// A constructor.
        /// </summary>
        /// <param name="type">The token type.</param>
        /// <param name="value">
        /// The string content (the text of the token).
        /// </param>
        /// <param name="line">
        /// The line in the input file in which the token appeared.
        /// </param>
        /// <param name="column">
        /// The column in the input file in which the token appeared.
        /// </param>
        public ConcreteToken(int type, String value, int line, int column) {
            super(type, value);
            this.line  = line;
            this.column = column;
            this.id = next_id++;
        }

        boolean is_id(int id) { return this.id == id; }
        int get_id() { return id; }

        /// <summary>
        /// The line in which the token appears. First line is line 0. The line
        /// number refers to the original file or string (and not after the
        /// preprocessing).
        /// </summary>
        private int line;

        /// <summary>
        /// The column in which the token appears. First column is column 0.
        /// The column number refers to the original file or string (and not
        /// after the preprocessing).
        /// </summary>
        private int column;

        /// <summary>
        /// An id  of the concrete token. Created using the static variable next_id.
        /// </summary>
        private int id;

/// <summary>
/// A static variable that holds the next ConcreteToken id to be assigned.
/// </summary>
static int next_id = 0;

            public int getLine() {
                return line;
            }

            public int getColumn() {
                return column;
            }

            public String getText() {
                return value;
            }
        };
